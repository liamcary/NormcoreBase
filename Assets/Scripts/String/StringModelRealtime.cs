using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StringModelRealtime
{
	[RealtimeProperty(1, true, true)]
	string _value;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StringModelRealtime : RealtimeModel
{
	public string value
	{
		get
		{
			return _valueProperty.value;
		}
		set
		{
			if (_valueProperty.value == value)
				return;
			_valueProperty.value = value;
			InvalidateReliableLength();
			FireValueDidChange(value);
		}
	}

	public delegate void PropertyChangedHandler<in T>(StringModelRealtime model, T value);
	public event PropertyChangedHandler<string> valueDidChange;

	public enum PropertyID : uint
	{
		Value = 1,
	}

	#region Properties

	private ReliableProperty<string> _valueProperty;

	#endregion

	public StringModelRealtime() : base(null)
	{
		_valueProperty = new ReliableProperty<string>(1, _value);
	}

	protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
	{
		_valueProperty.UnsubscribeCallback();
	}

	private void FireValueDidChange(string value)
	{
		try {
			valueDidChange?.Invoke(this, value);
		} catch (System.Exception exception) {
			UnityEngine.Debug.LogException(exception);
		}
	}

	protected override int WriteLength(StreamContext context)
	{
		var length = 0;
		length += _valueProperty.WriteLength(context);
		return length;
	}

	protected override void Write(WriteStream stream, StreamContext context)
	{
		var writes = false;
		writes |= _valueProperty.Write(stream, context);
		if (writes)
			InvalidateContextLength(context);
	}

	protected override void Read(ReadStream stream, StreamContext context)
	{
		var anyPropertiesChanged = false;
		while (stream.ReadNextPropertyID(out uint propertyID)) {
			var changed = false;
			switch (propertyID) {
				case (uint) PropertyID.Value: {
						changed = _valueProperty.Read(stream, context);
						if (changed)
							FireValueDidChange(value);
						break;
					}
				default: {
						stream.SkipProperty();
						break;
					}
			}
			anyPropertiesChanged |= changed;
		}
		if (anyPropertiesChanged) {
			UpdateBackingFields();
		}
	}

	private void UpdateBackingFields()
	{
		_value = value;
	}

}
/* ----- End Normal Autogenerated Code ----- */
